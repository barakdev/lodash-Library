const _ = {
  clamp(number, lower, upper){
    let lowerClampedValue = Math.max(number, lower);
    let clampedValue = Math.min(lowerClampedValue, upper);
    return clampedValue;
  }, 


  inRange(number, start, end) {
    if (end === undefined){
      end = start
      start = 0
    }
    if(start > end) {
      let temp = end
      end = start
      start = temp
    }
    var isInRange = start <= number && number < end
    return isInRange     
   },


  words(string) {
    let words = string.split(' ')
    return words
  },


  pad(string, length) {
    if(string.length >= length ){
    return string;
    };
    let startPaddingLength = Math.floor((length - string.length)/2);
    let endPaddingLength = length - string.length - startPaddingLength;
    let paddedString = ' '.repeat(startPaddingLength)+ string + ' '.repeat(endPaddingLength);
    return paddedString;
  },


  has(object, key) {
    let hasValue = object[key];
    if (hasValue != undefined){
      return true
      }
      return false
      },
      

    invert(object) {
      const invertedObject = {}
      for(let key in object){
        invertedObject[object[key]] = key;
      }
      return invertedObject
    },


    findKey(object, predicate){
      for (let key in object){
        const value = object[key];
        let predicateReturnValue = predicate(value);
        if (predicateReturnValue){
          return key
        };
       };
       undefined
       return undefined
    },


    drop(array, n){
      if( n === undefined){
        n = 1;
      }
      const droppedArray = array.slice(n, array.length);
      return droppedArray;
    },


    dropWhile(array, predicate){
      const cb = (element, index) => {
        return !predicate(element, index, array)
      };
      dropNumber = array.findIndex(cb);
      let droppedArray = this.drop(array, dropNumber);
      return droppedArray;
    },

    
    chunk(array, size){      
      if(size === undefined){
        size = 1
      };
      let genArr = [];
      for (let i = 0; i < array.length; i+= size){
        let arrayChunk = array.slice(i, i + size);
        genArr.push(arrayChunk);
      }
      return genArr
    }

}

module.exports = _;
